esphome:
  name: ha-lawnmower
  name_add_mac_suffix: false
  friendly_name: Lawn Mower

  project:
    name: "gabriel-lg.ha-lawnmower"
    version: "1.0.0"

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
#  encryption:
#    key: "placeholder"

ota:
#  password: "placeholder"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lawn Mower Fallback Hotspot"
    password: "VAXemuFSYmNB" #replace this password

captive_portal:

#### End of ESPHome boilerplate ####

substitutions:
  max_mowing_time: "120" # The maximum allowed mowing time in minutes
  moving_threshold: "0.2" # The vibration threshold to detect motion in delta m/s^2
  stand_still_delay: "4000" # The delay before standstill is concluded, in ms (in steps of vibration update interval)
  moving_delay: "2000" # The delay before moving is concluded, in ms (in steps of vibration update interval)
  acc_update_interval: "100" # The accelerometer update interval in ms (in steps of 100ms)
  vibration_update_interval: "2000" # The vibration update interval in ms (in steps if acc_update_interval)
  battery_update_interval: "1000" # the battery voltage update interval in ms (in steps of 100ms)
  battery_voltage_gain: "24.3" # The ADC voltage multiplication, to obtain the correct battery voltage slope
  battery_voltage_offset: "0.0" # The ADC voltage offset, to obtain the correct battery voltage, when combined with the gain.
  battery_filter_weight: "0.9" # Battery voltage Single Pole IIR filter's alpha value (0.0 .. 1.0); changing this number affects the charging slope threshold!
  charging_threshold: "20.5" # Charging treshold in Volt
  not_charging_threshold: "18.5" # Not charging treshold in Volt
  charging_slope_threshold: "0.01" # The charging slope threshold in Volt/battery_update_interval
  charging_delay: "4000" # The delay before charger connected is concluded, in ms
  tick_interval: "100" # ms

globals:
  - # The tick count, used for global time-keeping
    type: uint32_t
    id: ticks
    initial_value: "0"

i2c:
  scl: GPIO5
  sda: GPIO4
  scan: true

text_sensor:
  - platform: template
    id: status
    name: status
    update_interval: ${tick_interval}ms
    lambda: !lambda |-
      int statusNum = (id(mow)->state?1:0) | (id(moving)->state?2:0) | (id(charging)->state?4:0);
      std::string value = "Unknown";
      switch(statusNum)
      {
        case 4:
          value = "Standby";
          break;
        case 5:
          value = "Preparing";
          break;
        case 3:
        case 7:
          value = "Mowing";
          break;
        case 2:
        case 6:
          value = "Returning";
          break;
        case 0:
        case 1:
          value = "Fault";
          break;
      }

      //This quick fix prevents the mower from starting in Fault state
      if( !id(charging)->has_state() || !id(moving)->has_state() )
      {
        value = "Unknown";
      }

      id(ticks)++;
      return value;

sensor:
  - platform: mpu6050
    id: accelerometer
    address: 0x68
    accel_x:
      id: accel_x
    accel_y:
      id: accel_y
    accel_z:
      id: accel_z
    update_interval: never
  - platform: template
    disabled_by_default: True
    icon: "mdi:vibrate"
    name: "Vibration"
    id: acc_vibration
    unit_of_measurement: "m/sÂ²"
    accuracy_decimals: 3
    update_interval: ${acc_update_interval}ms
    lambda: !lambda |-
      static constexpr size_t numSamples = $vibration_update_interval / $tick_interval;
      static constexpr float movingThreshold = $moving_threshold; // meters/second^2

      static float samplesX[numSamples];
      static float samplesY[numSamples];
      static float samplesZ[numSamples];
      static int sample = 0;

      // This Lambda is an alternative for a regular function, allowing it to be declared inline.
      // This Lambda calculates the Mean Absolute Deviation of all elements in an array.
      auto mad = [](float (&samples)[numSamples])
      {
        float avg = 0;
        for(auto sample : samples) avg += sample;
        avg = avg / numSamples;
        float mad = 0;
        for(auto sample : samples) mad += fabs(sample - avg);
        mad = mad / numSamples;
        return mad;
      };

      // Update the moving sensor.
      // This "function" determines whether the robot is moving or standing still.
      // It does so, based on the moving_threshold, moving_delay and stand_still_delay configuration parameters.
      auto update_moving = [](float vibration)
      {
        static uint32_t delayCount = 0; //number of ticks since a new state is active
        bool currentState = id(moving)->state;
        bool newState = ( vibration >= movingThreshold );

        if(newState == currentState && id(moving)->has_state())
        {
          delayCount = 0;
        }
        else if( newState && (delayCount >= $moving_delay/$vibration_update_interval) )
        {
          delayCount = 0;
          id(moving).publish_state(true);
        }
        else if( !newState && (delayCount >= $stand_still_delay/$vibration_update_interval) )
        {
          delayCount = 0;
          id(moving).publish_state(false);
        }
        else
        {
          delayCount++;
        }
      };

      auto& acc = id(accelerometer);
      if(!acc) return NAN;
      // Read and store the accelerometer values
      acc->update();
      samplesX[sample] = id(accel_x).state;
      samplesY[sample] = id(accel_y).state;
      samplesZ[sample] = id(accel_z).state;
      sample++;
      if(sample >= numSamples)
      {
        // When the sample buffers are full, reset the sample count and update the sensor value
        sample = 0;
        // Calculate the MAD of all accelerometer axis.
        float madX = mad(samplesX);
        float madY = mad(samplesY);
        float madZ = mad(samplesZ);
        // Calculate the Root Sum Square of all MADs
        float rss = sqrtf(madX*madX + madY*madY + madZ*madZ);
        update_moving(rss);
        return rss; 
      }
      // Return no update
      return {};
  - platform: adc
    pin: GPIO17
    id: battery_voltage
    name: "Battery_voltage"
    disabled_by_default: True
    filters:
      - multiply: $battery_voltage_gain
      - offset: $battery_voltage_offset
    update_interval: ${battery_update_interval}ms
    force_update: True # Not removing duplicate values, is conveniant for spreadsheet (filter) calculations.
    on_value: 
      lambda: !lambda |-
          // Charging state is set when a steep increase of battery voltage is detected.
          // Or when the Battery voltage is above a specific level
          // Charging state is cleared when the mower moves.
          // This is method of detection is needed, becauses the charger floats the battery after it is full.
          static constexpr int chargingDelay = $charging_delay / $battery_update_interval; // in battery voltage update periods
          static constexpr int notChargingDelay = $charging_delay / $battery_update_interval; //in battery voltage update periods

          static int chargingCount = 0; //number of updates that charging conditions are met
          static int notChargingCount = 0; //number of updates that not-charging conditions are met

          static int movingTime = 0; //number of seconds that the mower reported moving
          static float iir = id(battery_voltage)->state;

          float voltage = id(battery_voltage)->state;
          float vibration = id(acc_vibration)->state;

          float prevIir = iir;
          iir = $battery_filter_weight * iir + (1.0 - $battery_filter_weight) * voltage;
          float slope = iir - prevIir;

          if(voltage > $charging_threshold)
          {
            chargingCount++;
            notChargingCount = 0;
          }
          else if(slope >= $charging_slope_threshold)
          {
            chargingCount++;
            notChargingCount = 0;
          }
          else
          {
            chargingCount = 0;
            if(voltage < $not_charging_threshold)
            {
                notChargingCount++;
            }
            else
            {
              notChargingCount = 0;
            }
          }

          bool chargingDetected = (chargingCount >= chargingDelay);
          bool notChargingDetected = (notChargingCount >= notChargingDelay);

          //Only update the charging state, if the charging state is certain.
          //This will prevent an incorrect state after booting.
          if(id(moving)->state)
          {
            chargingCount = 0;
            id(charging)->publish_state(false);
          }
          else if(chargingDetected)
          {
            id(charging)->publish_state(true);
          }
          else if(notChargingDetected)
          {
            id(charging)->publish_state(false);
          }

binary_sensor:
  - platform: gpio
    name: "Mower_on"
    disabled_by_default: True
    pin: 
      number: "GPIO16"
      mode:
        input: True
        pulldown: False
  - platform: template
    id: charging
    name: "Charger"
    device_class: plug
  - platform: template
    id: moving
    name: moving
    device_class: moving

status_led:
    pin:
      number: "GPIO2"
      inverted: True

switch:
  - platform: gpio
    id: mow
    name: "Mow"
    pin:
      inverted: False
      number: "GPIO13"
      mode:
        output: True
        open_drain: True
    on_turn_on:
      then:
        - script.execute: mowing_timer
    on_turn_off: 
      then:
        - script.stop: mowing_timer

script:
  - id: mowing_timer
    then:
      - delay: !lambda 'return id(mowing_time).state * 60 * 1000;'
      - switch.turn_off: mow
  - id: check_parameters
    then:
      - lambda: !lambda |-
          //no need to actually run this lambda; all checks are performed at compile time
          static_assert($max_mowing_time > 0, "max_mowing_time must be > 0");
          static_assert($tick_interval > 0, "tick_interval must be > 0");
          static_assert($vibration_update_interval > 0, "vibration_update_interval must be > 0");
          static_assert($vibration_update_interval % $tick_interval == 0, "vibration_interval must be a multiple of tick_interval");
          static_assert($stand_still_delay >= 0, "stand_still_delay must be >= 0");
          static_assert($stand_still_delay % $vibration_update_interval == 0, "stand_still_delay must be multiple of vibration_interval");
          static_assert($moving_delay >= 0, "moving_delay must be >= 0");
          static_assert($moving_delay % $vibration_update_interval == 0, "moving_delay must be multiple of vibration_interval");
          static_assert($acc_update_interval > 0, "acc_update_interval must be > 0");
          static_assert($acc_update_interval % $tick_interval == 0, "acc_update_interval must be a multiple of tick_interval");
          static_assert($battery_voltage_gain > 0, "battery_voltage_gain must be > 0");
          static_assert($battery_voltage_offset >= 0, "battery_voltage_offset must be >= 0");
          static_assert($battery_update_interval > 0, "battery_update_interval must be > 0");
          static_assert($battery_update_interval % $tick_interval == 0, "battery_update_interval must be a multiple of tick_interval");
          static_assert($battery_filter_weight > 0.0 && $battery_filter_weight < 1.0, "battery_filter_weight must be > 0.0 and < 1.0");
          static_assert($not_charging_threshold > 0.0, "not_charging_threshold must be > 0.0");
          static_assert($charging_threshold > $not_charging_threshold, "charging_threshold must be > not_charging_threshold");
          static_assert($charging_slope_threshold > 0.0, "charging_slope_threshold must be > 0.0");
          static_assert($charging_delay > 0, "charging_delay must be > 0");
          static_assert($charging_delay % $battery_update_interval == 0, "charging_delay must be multiple of battery_update_interval");

number:
  - platform: template
    name: "Mowing time"
    id: mowing_time
    icon: mdi:timer
    restore_value: True
    unit_of_measurement: "minutes"
    min_value: 1
    max_value: $max_mowing_time
    step: 1
    mode: BOX
    optimistic: True
